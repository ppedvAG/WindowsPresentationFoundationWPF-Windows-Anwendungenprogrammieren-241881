<Window x:Class="M009.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:M009"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="300"
		WindowStartupLocation="CenterScreen"
		Topmost="True"
		DataContext="{Binding RelativeSource={RelativeSource Self}}">
	<Window.Resources>
		<local:ValidationRuleCollection x:Key="Rules">
			<!--ValidatesOnTargetUpdated: Von Anfang an Validieren-->
			<local:LengthValidation ValidatesOnTargetUpdated="True"/>
			<local:LetterValidation ValidatesOnTargetUpdated="True"/>
		</local:ValidationRuleCollection>
		<!--<local:LengthValidation x:Key="LV"/>-->

		<!--ErrorTemplate-->
		<!--Wird im Fehlerfall angezeigt-->
		<!--AdornedElementPlaceholder: Das Element, welches gerade validiert wird-->
		<ControlTemplate x:Key="ET">
			<Border BorderBrush="Red" BorderThickness="3">
				<StackPanel>
					<AdornedElementPlaceholder Name="AEP"/>
					<Popup IsOpen="{Binding ElementName=AEP, Path=AdornedElement.IsMouseOver, Mode=OneWay}">
						<TextBlock Text="{Binding ElementName=AEP, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}"
							   Foreground="Red" Background="White"/>
					</Popup>
					<!--<ItemsControl ItemsSource="{Binding ElementName=AEP, Path=AdornedElement.(Validation.Errors)}">
						<ItemsControl.ItemTemplate>
							<DataTemplate>
								<TextBlock Text="{Binding ErrorContent}" Foreground="Red"/>
							</DataTemplate>
						</ItemsControl.ItemTemplate>
					</ItemsControl>-->
				</StackPanel>
			</Border>
		</ControlTemplate>
		
		<!--ErrorTemplate per Style auf alle TextBoxen anwenden-->
		<!--<Style TargetType="TextBox">
			<Setter Property="Validation.ErrorTemplate" Value="{StaticResource ET}"/>
		</Style>-->
	</Window.Resources>
	<StackPanel Margin="5">
		<!--Validation-->
		<!--Den User davon abhalten, fehlerhafte Werte einzugeben-->
		<!--= die fehlerhaften Werte nicht ins Backend übernehmen-->

		<!--Drei Möglichkeiten: ValidationRules, ValidateOnException, ValidateOnDataError-->


		<!--ValidationRule-->
		<!--Eigene Klasse, welche per Langform (beim Binding) eingebunden wird-->
		<TextBox>
			<TextBox.Text>
				<Binding Path="UserInput" UpdateSourceTrigger="PropertyChanged">
					<Binding.ValidationRules>
						<local:LengthValidation/>
					</Binding.ValidationRules>
				</Binding>
			</TextBox.Text>
		</TextBox>
		<Button Click="Button_Click"
				Content="Test"/>

		<!--ValidationRules in der Kurzform einbinden-->
		<!--Resource anlegen mit den Rules-->
		<!--Resource muss einen eigenen Typen haben um das Generic zu entfernen-->
		<!--<TextBox Text="{Binding UserInput, ValidationRules={StaticResource Rules}, UpdateSourceTrigger=PropertyChanged}"/>-->

		<!--Eigene MarkupExtension-->
		<TextBox Text="{local:Validation Binding={Binding UserInput, UpdateSourceTrigger=PropertyChanged}, Rules={StaticResource Rules}}"
				 Validation.ErrorTemplate="{StaticResource ET}"/>
		
		
		<!--ValidateOnException-->
		<!--Wenn das Property eine Exception wirft, wird validiert-->
		<!--Die Fehlermeldung in der Exception wird in das ErrorTemplate eingetragen-->
		<TextBox Text="{Binding ExceptionInput, UpdateSourceTrigger=PropertyChanged, ValidatesOnExceptions=True}"
				 Validation.ErrorTemplate="{StaticResource ET}"/>
		
		
		<!--ValidateOnDataError-->
		<!--Die Model-Klasse bekommt das IDataErrorInfo Interface-->
		<!--Dieses Interface generiert einen Indexer, welcher die Validierung anhand von dem Variablennamen durchführt-->
		<TextBox Text="{Binding DataErrorInput, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"
				 Validation.ErrorTemplate="{StaticResource ET}"/>
	</StackPanel>
</Window>
